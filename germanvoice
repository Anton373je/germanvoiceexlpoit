-- ========== Orion Loader ==========
local ORION_URL = "https://raw.githubusercontent.com/shlexware/Orion/main/source"

local function getHttpGet()
    if pcall(function() return game.HttpGet end) then
        return function(url) return game:HttpGet(url, true) end
    end
    if syn and syn.request then
        return function(url)
            local ok, res = pcall(function()
                return syn.request({Url = url, Method = "GET"})
            end)
            if ok and res then return res.Body end
        end
    end
    local HttpService = game:GetService("HttpService")
    if HttpService and HttpService.GetAsync then
        return function(url)
            local ok, res = pcall(function() return HttpService:GetAsync(url) end)
            if ok then return res end
        end
    end
end

local http_get = getHttpGet()
local loader = loadstring or (syn and syn.loadstring) or (KRNL and KRNL.loadstring)
local OrionLib = nil

if loader and http_get then
    pcall(function()
        local src = http_get(ORION_URL)
        if type(src) == "string" and #src > 50 then
            local chunk = loader(src)
            if type(chunk) == "function" then
                local ok, lib = pcall(chunk)
                if ok and type(lib) == "table" then
                    OrionLib = lib
                end
            end
        end
    end)
end

if not OrionLib then return end

-- ========== Services ==========
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- ========== GUI ==========
local Window = OrionLib:MakeWindow({
    Name = "Player Utilities",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "PlayerUtilities"
})

local PlayerTab = Window:MakeTab({
    Name = "Players",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- ========== Helper Functions ==========
local function getPlayerRoot(player)
    if player and player.Character then
        local hrp = player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then return hrp end
    end
    return nil
end

local function freezePlayer(player)
    if not player.Character then return end
    for _, part in ipairs(player.Character:GetChildren()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
end

local function ragdollPlayer(player)
    if not player.Character then return end
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = true
        for _, part in ipairs(player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
    end
end

local function bringPlayer(player)
    local hrp = getPlayerRoot(player)
    local myHrp = getPlayerRoot(LocalPlayer)
    if hrp and myHrp then
        hrp.CFrame = myHrp.CFrame + Vector3.new(0, 5, 0)
    end
end

-- ========== GUI Buttons ==========
local function showPlayerActions(player)
    PlayerTab:Clear()
    PlayerTab:AddLabel({Name = "Selected: "..player.Name})

    PlayerTab:AddButton({
        Name = "Freeze "..player.Name,
        Callback = function() freezePlayer(player) end
    })

    PlayerTab:AddButton({
        Name = "Ragdoll "..player.Name,
        Callback = function() ragdollPlayer(player) end
    })

    PlayerTab:AddButton({
        Name = "Bring to Me "..player.Name,
        Callback = function() bringPlayer(player) end
    })

    PlayerTab:AddButton({
        Name = "Back to Player List",
        Callback = function() updatePlayerList() end
    })
end

-- ========== Player List ==========
function updatePlayerList()
    PlayerTab:Clear()
    PlayerTab:AddLabel({Name = "Players in Server:"})
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            PlayerTab:AddButton({
                Name = player.Name,
                Callback = function() showPlayerActions(player) end
            })
        end
    end
end

-- Initial population
updatePlayerList()

-- Update when players join/leave
Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)

OrionLib:Init()
